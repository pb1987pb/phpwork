
  1，第一种:普通for循环	
  代码如下:

for(j = 0; j < arr.length; j++) {
   
} 
简要说明:
最简单的一种，也是使用频率最高的一种，虽然性能不弱，但仍有优化空间

2，第二种:优化版for循环

代码如下:

for(j = 0,len=arr.length; j < len; j++) {
   
}
简要说明:
使用临时变量，将长度缓存起来，避免重复获取数组长度，当数组较大时优化效果才会比较明显。

这种方法基本上是所有循环遍历方法中性能最高的一种

3，第三种:弱化版for循环

代码如下:

for(j = 0; arr[j]!=null; j++) {
   
}
简要说明:
这种方法其实严格上也属于for循环，只不过是没有使用length判断，而使用变量本身判断

实际上，这种方法的性能要远远小于普通for循环

4，第四种:foreach循环

代码如下:

arr.forEach(function(e,index){  
   
});
简要说明:
数组自带的foreach循环，使用频率较高，实际上性能比普通for循环弱



5,第5种:forin循环

代码如下:

for(j in arr) {
   
}
简要说明:
这个循环很多人爱用，但实际上，经分析测试，在众多的循环遍历方式中

它的效率是最低的

6,第七种:map遍历

代码如下:  而该函数接收三个参数：数组当前值，数组索引、数组

arr.map(function(n){  
   
});
简要说明:
这种方式也是用的比较广泛的，虽然用起来比较优雅，但实际效率还比不上foreach






