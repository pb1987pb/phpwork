



  1,数组的复制，也就是一个新的数组 ,原数组不变。
  
       es6中   let resArr = [...arr]; // 返回一个新的数组,原数组不变
	   
	   es5 中   var resArr=arr.slice(0)   // 返回一个新的数组,原数组不变
	   
   2,把类数组变成数组	   那么同样的 可以利用  slice 方法，把一个类数组变成数组，  leiArr
	    
	            var resArr=Array.prototype.slice.call(leiArr,0) 

     或者使用 es6  的语法  const listArr = Array.from(listContainer.children[0].children); // listContainer.children[0] 是ul元素，listContainer.children[0].children 就是ul下的所有li


				
	3,数组的删除

        1，利用   splice

		  例子 ，需要删除数组 arr 里面的其中一项 iteam
		  
		           var index=arr.indexOf(iteam);     先利用 indexOf找到它的位置
		  
                    arr.splice(index,1);找到位置，直接splice删除
					
		 2，利用	  filter   对数组中的每一项运行函数，返回该函数返回true的元素组成的数组
		 
		               下面这个就是把和iteam的这个一样的去掉了，重新赋值。

                    arr = arr.filter(o => o.goodsId != iteam.goodsId);		 

        

     4，数组的更新 ，更新其中的冒一个

            利用 	 splice  ，更新arr中的 iteam 这一项
			
                  var index=arr.indexOf(iteam);     先利用 indexOf找到它的位置
		  
                    arr.splice(index,1,newiteam);找到位置，直接splice删除,然后在相同的位置插入新的值 。
                       			
	    
	    
	 5，数组的合并   concat   ，这个使用的最多的地方就是上拉加载 
	   
	   ，把当前数组与另一个数组连接起来，并返回新的元素，原来的数组不被改变，concat可以接收任意个元素和数组，并把数组拆开放入新的数组中
	   
	              var arr = ["a","b","c"];
                  alert(arr.concat([1,2,3]));//数组arr不变，返回["a","b","c",1,2,3]
                   alert(arr.concat([1,2,[3,4]]));//返回["a","b","c",1,2,3,4]
	   
	             				  
	             this.prods = this.prods.concat(res.data.message); 


                 那么在 es6里面，我们还可以用 扩展运算符

                        //把一个数组插入另一个数组字面量
                         var arr4 = [...arr, 4, 5, 6];
				 
                       console.log(arr4);//[1, 2, 3, 4, 5, 6]

                     那么这里还可以
				 
		  this.shopListArr = [...this.shopListArr, ...res];

              

                    也就是说上面的那个我们写成  
				 
				 this.prods = this.prods.concat(res.data.message); 
				 
				 
				 this.prods=[...this.prods, ...res.data.message];
				 
		6,判断 一个数组里面的值是否在另一个数组里面


                       function hasPermission(roles, route) {
  if (route.meta && route.meta.roles) {
                   //includes() 方法用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，
    return roles.some(role => route.meta.roles.includes(role))
  } else {
    return true
  }
}



















 		 
				 
				 
				 
				 
				 
				 
				 
				 